{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst BACKEND_URL = environment.apiUrl + '/user';\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.isAuthenticated = false;\n    this.authStatusListener = new Subject();\n  }\n  getToken() {\n    return this.token;\n  }\n  getAuthStatusListener() {\n    return this.authStatusListener.asObservable();\n  }\n  getIsAuth() {\n    return this.isAuthenticated;\n  }\n  getUserId() {\n    return this.userId;\n  }\n  createUser(email, password) {\n    const authData = {\n      email: email,\n      password: password\n    };\n    this.http.post(BACKEND_URL + '/signup', authData).subscribe({\n      next: response => {\n        this.router.navigate(['/']);\n      },\n      error: err => {\n        this.authStatusListener.next(false);\n      }\n    });\n  }\n  login(email, password) {\n    const authData = {\n      email: email,\n      password: password\n    };\n    this.http.post(BACKEND_URL + '/login', authData).subscribe({\n      next: response => {\n        this.token = response.token;\n        if (this.token) {\n          const expiresInDuration = response.expiresIn;\n          this.setAuthTimer(expiresInDuration);\n          this.isAuthenticated = true;\n          this.authStatusListener.next(true);\n          this.userId = response.userId;\n          const now = new Date();\n          const expirationDate = new Date(now.getTime() + expiresInDuration * 1000); // 1hr from now, * 1000 เพิื่อทำให้เป็น milisecond\n          this.saveAuthData(this.token, expirationDate, this.userId);\n          this.router.navigate(['/']);\n        }\n      },\n      error: err => {\n        this.authStatusListener.next(false);\n      }\n    });\n  }\n  /** Automatic authenticate the user if we got the information for it in our local storage */\n  autoAuthUser() {\n    const authInformation = this.getAuthData();\n    if (!authInformation) return;\n    /** Check if the expiration date still in the future  */\n    const now = new Date();\n    /** เวลาที่จะหมดอายุในอนาคต - กับเวลาปัจจุบัน เช่น หมดอายุตอน 11 โมง แต่ตอนนี่พึ่งจะ 10 โมง ก็คือยังไม่หมดอายุ expiresIn ก็จะเท่ากับ 1 */\n    const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\n    if (expiresIn > 0) {\n      this.token = authInformation.token;\n      this.isAuthenticated = true;\n      this.userId = authInformation.userId;\n      this.authStatusListener.next(true);\n      this.setAuthTimer(expiresIn / 1000); // หาร 1000 เพื่อแปรเป็น second\n    }\n  }\n\n  logout() {\n    this.token = null;\n    this.userId = null;\n    this.isAuthenticated = false;\n    this.authStatusListener.next(false);\n    clearTimeout(this.tokenTimer);\n    this.clearAuthData();\n    this.router.navigate(['/']);\n  }\n  /** @duration = รับค่าเป็น second */\n  setAuthTimer(duration) {\n    console.log('expire in: ' + duration + ' second');\n    this.tokenTimer = setTimeout(() => {\n      this.logout();\n    }, duration * 1000); // * 1000 to convert for milisecond\n  }\n\n  saveAuthData(token, expirationDate, userId) {\n    localStorage.setItem('token', token);\n    localStorage.setItem('expiration', expirationDate.toISOString()); // convert to string use .toISOString() for convert to serialized and standardized version of the date, which i then can use to recreate it once i read in the date later.\n    localStorage.setItem('userId', userId);\n  }\n  clearAuthData() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expiration');\n    localStorage.removeItem('userId');\n  }\n  getAuthData() {\n    const token = localStorage.getItem('token');\n    const expiration = localStorage.getItem('expiration');\n    const userId = localStorage.getItem('userId');\n    if (!token || !expiration) return;\n    return {\n      token: token,\n      expirationDate: new Date(expiration),\n      userId: userId\n    };\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}