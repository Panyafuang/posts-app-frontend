{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst BACKEND_URL = environment.apiUrl + '/posts/';\nexport class PostsService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.posts = [];\n    this.postsUpdated = new Subject();\n  }\n  getPosts(postsPerPage, currentPage) {\n    const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`;\n    this.http.get(BACKEND_URL + queryParams).pipe(map(postData => {\n      return {\n        posts: postData.posts.map(post => {\n          return {\n            id: post._id,\n            title: post.title,\n            content: post.content,\n            imagePath: post.imagePath,\n            creator: post.creator\n          };\n        }),\n        totalPosts: postData.totalPosts\n      };\n    })).subscribe(transformedPostsData => {\n      this.posts = transformedPostsData.posts; // updated local posts\n      this.postsUpdated.next({\n        posts: [...this.posts],\n        totalPosts: transformedPostsData.totalPosts\n      });\n    });\n  }\n  getPost(id) {\n    // return {...this.posts.find(post => post.id === id)}; // clone obj. that return from function find\n    return this.http.get(BACKEND_URL + id);\n  }\n  getPostUpdateListener() {\n    return this.postsUpdated.asObservable();\n  }\n  addPost(title, content, image) {\n    /** JSON can't include a file, instead of sending JSON, we'll now send form data\n     * FormData allows us to combine text and blob\n    */\n    const postData = new FormData();\n    postData.append('title', title);\n    postData.append('content', content);\n    postData.append('image', image, title); // title will be the file name i provide to the backend. ใช้ title เป็นชื่อรูป\n    this.http.post(BACKEND_URL, postData).subscribe(responseData => {\n      // const post: Post = {\n      //   id: responseData.post.id,\n      //   title: title,\n      //   content: content,\n      //   imagePath: responseData.post.imagePath\n      // }\n      // this.posts.push(post); // add new post to local post\n      // this.postsUpdated.next([...this.posts]); // emit new post for entrie app\n      this.router.navigate(['/']);\n    });\n  }\n  /**\n   *\n   * @param image = If create new post image or change image in edit mode is File type, But if not change image is string type.\n   */\n  updatePost(id, title, content, image) {\n    let postData;\n    // Change image, send data of formData\n    if (typeof image === \"object\") {\n      postData = new FormData();\n      postData.append(\"id\", id);\n      postData.append(\"title\", title);\n      postData.append(\"content\", content);\n      postData.append(\"image\", image, title);\n    } else {\n      // Not change iamge, send data of JSON type\n      postData = {\n        id: id,\n        title: title,\n        content: content,\n        imagePath: image,\n        creator: null\n      };\n    }\n    this.http.put(BACKEND_URL + id, postData).subscribe(response => {\n      // const updatedPosts = [...this.posts];\n      // const postIndex = updatedPosts.findIndex(post => post.id === id);\n      // const post: Post = {\n      //   id: id,\n      //   title: title,\n      //   content: content,\n      //   imagePath: response.post.imagePath\n      // }\n      // updatedPosts[postIndex] = post;\n      // this.posts = updatedPosts;\n      // this.postsUpdated.next([...this.posts]);\n      this.router.navigate(['/']);\n    });\n  }\n  deletePost(postId) {\n    return this.http.delete(BACKEND_URL + postId);\n    // .subscribe(() => {\n    //   const updatedPosts = this.posts.filter((post: Post) => post.id !== postId);\n    //   this.posts = updatedPosts;\n    //   this.postsUpdated.next([...this.posts]); // [...this.posts] = copy this.posts array เพื่อป้องกันไม่ให้ component อื่นแก้ไขได้\n    // });\n  }\n}\n\nPostsService.ɵfac = function PostsService_Factory(t) {\n  return new (t || PostsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nPostsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PostsService,\n  factory: PostsService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}